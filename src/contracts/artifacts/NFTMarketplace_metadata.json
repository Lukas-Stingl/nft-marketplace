{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_nftCollection",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "auctionId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startingPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "duration",
						"type": "uint256"
					}
				],
				"name": "AuctionCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "auctionId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "winnersHighestBid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					}
				],
				"name": "AuctionSuccessful",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ClaimFunds",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "offerId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "fulfilled",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "cancelled",
						"type": "bool"
					}
				],
				"name": "Offer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "offerId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OfferCancelled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "offerId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OfferFilled",
				"type": "event"
			},
			{
				"stateMutability": "nonpayable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "auctionCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "auctions",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "auctionId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "nftId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "startingPrice",
						"type": "uint256"
					},
					{
						"internalType": "uint64",
						"name": "duration",
						"type": "uint64"
					},
					{
						"internalType": "uint256",
						"name": "startedAt",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endedAt",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isActive",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "highestBidder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "highestBid",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_auctionId",
						"type": "uint256"
					}
				],
				"name": "autoBookBack",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_offerId",
						"type": "uint256"
					}
				],
				"name": "cancelOffer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimFunds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionId",
						"type": "uint256"
					}
				],
				"name": "end",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionId",
						"type": "uint256"
					}
				],
				"name": "fillBid",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_offerId",
						"type": "uint256"
					}
				],
				"name": "fillOffer",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_nftId",
						"type": "uint256"
					}
				],
				"name": "makeAuction",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "makeOffer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "offerCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "offers",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "offerId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "fulfilled",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "cancelled",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userFunds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "There are currently hardcoded attributes, e.g. duration of an auction, which later can be implemented so that an user can set his desired duration for the auction",
			"events": {
				"AuctionCreated(uint256,uint256,uint256,uint256)": {
					"params": {
						"auctionId": "The unique ID of the auction",
						"duration": "The duration of the auction",
						"startingPrice": "Currently not implemented. For future use: the Seller can set his own minimum starting price for the auction",
						"tokenId": "The unique ID of the NFT"
					}
				},
				"AuctionSuccessful(uint256,uint256,uint256,address)": {
					"params": {
						"auctionId": "The unique ID of the auction",
						"tokenId": "The unique ID of the NFT",
						"winner": "The bidder with the highest Bid, thus is the winner of the auction",
						"winnersHighestBid": "The highest Bid made by an bidder"
					}
				},
				"ClaimFunds(address,uint256)": {
					"params": {
						"amount": "The amount of Ether, the user has earned through his sales",
						"user": "The address of the user who claims the funds"
					}
				},
				"OfferCancelled(uint256,uint256,address)": {
					"params": {
						"id": "The unique ID of the NFT",
						"offerId": "The unique ID of the offer",
						"owner": "The seller of the NFT, which decided to not sell his NFT anymore"
					}
				},
				"OfferFilled(uint256,uint256,address)": {
					"params": {
						"id": "The unique ID of the NFT",
						"newOwner": "The buyer of the NFT, which is set as the new owner",
						"offerId": "The unique ID of the offer"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"autoBookBack(uint256,uint256)": {
					"params": {
						"_auctionId": "Refers to a certain auction ID",
						"amount": "The amount placed in the highest bid, before it got overbidden"
					}
				},
				"cancelOffer(uint256)": {
					"params": {
						"_offerId": "The ID of the offer which the user wants to cancel"
					}
				},
				"constructor": {
					"params": {
						"_nftCollection": "Consists of every NFT ever minted using our application"
					}
				},
				"end(uint256)": {
					"details": "because there is currently no option to call this funcition automatically when the auction countdown reaches 0, this function is connected to a \"Redeem NFT\"-Button in the front-end.further automated functionality could be implemented as Ethereum introduces this possibiliy to call a function from external at a specific time",
					"params": {
						"_auctionId": "Refers to a certain auction ID"
					},
					"returns": {
						"_0": "auction Returns the auction struct behind the given auction ID"
					}
				},
				"fillBid(uint256)": {
					"params": {
						"_auctionId": "Refers to a certain auction ID"
					}
				},
				"fillOffer(uint256)": {
					"params": {
						"_offerId": "The ID of the offer matched with the NFT which the user wants to buy"
					}
				},
				"makeAuction(uint256)": {
					"details": "the _auction.startingPrice is currently is without any functionality, but can be used for further implementations",
					"params": {
						"_nftId": "Refers to the NFT which is placed on the market by this auction"
					}
				},
				"makeOffer(uint256,uint256)": {
					"params": {
						"_id": "The token id of the NFT",
						"_price": "The price at which the NFT can be bought"
					}
				}
			},
			"title": "A marketplace where users can buy/sell their NFT by auction or offer",
			"version": 1
		},
		"userdoc": {
			"events": {
				"AuctionCreated(uint256,uint256,uint256,uint256)": {
					"notice": "Is emitted once an aution is made"
				},
				"AuctionSuccessful(uint256,uint256,uint256,address)": {
					"notice": "Is emitted once an aution has ended successfully"
				},
				"ClaimFunds(address,uint256)": {
					"notice": "Is emitted once a user claims its available funds"
				},
				"OfferCancelled(uint256,uint256,address)": {
					"notice": "Is emitted once an offer is cancelled"
				},
				"OfferFilled(uint256,uint256,address)": {
					"notice": "Is emitted once an offer is made"
				}
			},
			"kind": "user",
			"methods": {
				"auctions(uint256)": {
					"notice": "Number of total created auctions"
				},
				"autoBookBack(uint256,uint256)": {
					"notice": "Books back all transfered ether of previous bids in case a new highest bid was submitted "
				},
				"cancelOffer(uint256)": {
					"notice": "Cancel an offer from the offers list. Only available to the owner of the offer"
				},
				"claimFunds()": {
					"notice": "The user can withdraw their funds made by selling a NFT"
				},
				"constructor": {
					"notice": "Passes every NFT stored in the collection for making them accessible for every type of market interactions"
				},
				"end(uint256)": {
					"notice": "Is called after the auction has ended → if someone bid on the NFT, it is transferred to the highest bidder, else transferred back to the seller"
				},
				"fillBid(uint256)": {
					"notice": "Places a bid on a certain running NFT with a determined amount entered by the user, thus making him the highest bidder"
				},
				"fillOffer(uint256)": {
					"notice": "The sender buys a NFT from the offers list"
				},
				"makeAuction(uint256)": {
					"notice": "Transfers the NFT from seller to smart contract and emits Auction Event, thus starting the timer based on the duration"
				},
				"makeOffer(uint256,uint256)": {
					"notice": "Sets the price at which the NFT can be bought from other users and puts the NFT for sale on the market"
				},
				"offers(uint256)": {
					"notice": "Number of total created offers"
				},
				"userFunds(address)": {
					"notice": "Maps an offer struct to an specific offer ID"
				}
			},
			"notice": "This contract provides you with every business logic behind the different market mechanisms",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/contracts/NFTMarketplace.sol": "NFTMarketplace"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de",
			"license": "MIT",
			"urls": [
				"bzz-raw://cbc4803332d45dff58f865ed21c942fe4668e47cc7196c8dfe84102040b1d70f",
				"dweb:/ipfs/QmXhZLsocznRWCSyhjo3vo66Z1VsuuNptAVb6ASPYsWtGx"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990",
			"license": "MIT",
			"urls": [
				"bzz-raw://a439187f7126d31add4557f82d8aed6be0162007cd7182c48fd934dbab8f3849",
				"dweb:/ipfs/QmRPLguRFvrRJS7r6F1bcLvsx6q1VrgjEpZafyeL8D7xZh"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
			"license": "MIT",
			"urls": [
				"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
				"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
			"keccak256": "0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://afbedcf17f31db719e6fdc56caa8f458799c5fa2eb94cb1e94ef18f89af85768",
				"dweb:/ipfs/QmVmqRdBfbgYThpZSoAJ5o9mnAMjx8mCHHjv3Rh8cQAAg3"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
			"keccak256": "0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf",
			"license": "MIT",
			"urls": [
				"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34",
				"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58",
				"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45",
			"license": "MIT",
			"urls": [
				"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30",
				"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"src/contracts/NFTCollection.sol": {
			"keccak256": "0x5d3b586db790e96d93ccde6da8a1d2e1cd294f56421bcac6bc7419ee571ee0dd",
			"license": "MIT",
			"urls": [
				"bzz-raw://fd2c0dc82d22bc1a1020b2baaa645964e1b12539e50eb9039b898e366efafe2f",
				"dweb:/ipfs/QmUKZgMyMyPj11SY7sWkczJjUV9hBACTr59rsJDbC5EBTa"
			]
		},
		"src/contracts/NFTMarketplace.sol": {
			"keccak256": "0x8ff54cc163b3d0474bf4d4f0b8cd7ea8d4816de5fff0f22adc6f99b8891201d5",
			"license": "MIT",
			"urls": [
				"bzz-raw://a318192c4baf2c0b3be5df9c17df814d67335c71dc4203ce27cc33f84e15ea3f",
				"dweb:/ipfs/QmWKfc2RBYHZuUk6oheAkTHyZiLrNTbaApoX4eizKqxCke"
			]
		}
	},
	"version": 1
}